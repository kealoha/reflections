What happens when you initialize a repository? Why do you need to do it?

When you run "git init", it creates a .git folder (hidden) that will be initialized but empty, sicne you haven't made any commits yet.  When you run "git status", it will show you the files that are in the directory, but currently none are being tracked.



How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is between the repository and the working directory, kinda like being in limbo.  The staging area offers the ability to git add more than one file that can be combined as one logical commit to the repository.  Running git status will also show you files that are not yet being tracked from your working directory.


How can you use the staging area to make sure you have one commit per logical change?

git diff (no args) - compares working directory to staging area
git diff --staged - compares staging area to most recent commit in repository



What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A branch would be helpful when you want to make changes (experimental, new language) but still want a working copy of your original project.



How do the diagrams help you visualize the branch structure?

It helps show how commits can continue to be submitted concurrently within different branches, even though they have a common parent. It also helps visualize reachability, in that a previous commit is only reachable within its own branch. 
git log --graph --oneline firstbranch secondbranch



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When you merge two branches together (git checkout master, git merge branch1 branch2) it will retain anything that is in both branches, and then look back at the common parent of the 2 branches and do 2 things 1) remove anything that was originally in the parent but has been removed and 2) add new things that were not in the parent.  It is represented as such in the diagram because the new branch usually merges back into the master? Idk



What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merges are pretty straightforward as explained above.  This makes it really easy to merge when there aren't any conflicts, which are times when manual merges would be time consuming without due cause.  However, there are complex situations (e.g. conflicts) where git doesn't have the insight to know which version of the modified code is correct.  I like that it adds the >>>>> |||||| <<<<< syntax to indicate the areas that need to be manually evaluated for merging
